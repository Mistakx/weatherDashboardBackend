<!-- https://www.section.io/engineering-education/building-simple-maps-using-leaflet-js/ -->

<html lang="en">
  <head>
    <!--! Meta Information -->

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Document</title>

    <!--! Dependencies -->

    <!-- https://leafletjs.com/SlavaUkraini/examples/quick-start/ -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
      integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
      integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
      crossorigin=""
    ></script>

    <!-- http://kartena.github.io/Proj4Leaflet/ -->
    <script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
    <script src="proj4.js"></script>
    <script src="proj4leaflet.js"></script>

    <!-- Bootstrap  -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>

    <!--! Style -->
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        width: 100%;
        height: 90%;
      }
    </style>
  </head>

  <body>
    <!-- Weather dates dropdown menu -->
    <div class="dropdown">
      <a
        class="btn btn-secondary dropdown-toggle"
        href="#"
        role="button"
        id="dropdownMenuLink"
        data-bs-toggle="dropdown"
        aria-expanded="false"
      >
        Weather dates
      </a>

      <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
        <% for (let index = 0; index < weatherDates.length; index++) { %>
        <li>
          <input
            id="clickMe"
            type="button"
            value="<%=
          weatherDates[index].date%>"
            onclick='loadGeoJSONs("<%-weatherDates[index]._id %>")'
          />
        </li>
        <% } %>
      </ul>
    </div>

    <div id="map"></div>
  </body>

  <script>
    //! Map
    let map = L.map("map", {
      center: [38.686796, -9.128914], // The coordinates the map is in when first loaded
      zoom: 8, // The zoom level the map has when first loaded
    });

    //! Map tile layer
    let mapLayer = L.tileLayer(
      "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
      {
        noWrap: true, // If false, the map wraps around itself, repeating itself
      }
    ).addTo(map);

    // Returns the temperature of a given color
    function getTemperatureColor(temperature) {
      return temperature > 20
        ? "#800026"
        : temperature > 15
        ? "#BD0026"
        : temperature > 10
        ? "#E31A1C"
        : temperature > 5
        ? "#FC4E2A"
        : temperature > 0
        ? "#FD8D3C"
        : temperature > -5
        ? "#FEB24C"
        : temperature > -10
        ? "#FED976"
        : "#FFEDA0";
    }

    // Returns the style of a region in the map
    function style(feature) {
      return {
        fillColor: getTemperatureColor(feature.weather.current.temp_c),
        weight: 2,
        opacity: 1,
        color: "white",
        dashArray: "3",
        fillOpacity: 0.7,
      };
    }

    async function loadGeoJSONsWithoutWeather() {
      //! Fetch the geoJSON from the backend
      console.log("Started fetching the geoJSONs from the backend.");
      let url = "http://localhost:8000/getRegionBorders/";

      const geoJSONsResponse = await fetch(url);

      console.log("Finished fetching the geoJSONs from the backend.");
      // Note that despite the method being named json(),
      //the result is not JSON but is instead the result of taking JSON as input and parsing it to produce a JavaScript object.
      let geoJSONsArray = await geoJSONsResponse.json();
      for (const geoJSON of geoJSONsArray) {
        console.log(
          "Received geoJON with the following projection: ",
          geoJSON.crs.properties.name
        );

        //! Fetch the projection information to use in the proj4 library, so the coordinates can be correctly projected to the map
        console.log(
          "Started fetching the projection information from epsg.io."
        );

        let projectionNumber = geoJSON.crs.properties.name.split("::")[1]; // The number of the EPSG projection, used to fetch the projection information from an external API
        let projectionInformationURL =
          "https://epsg.io/" + projectionNumber + ".proj4"; // The URL of the projection information
        const projectionResponse = await fetch(projectionInformationURL);
        projectionInformation = await projectionResponse.text();

        let projectionName = "urn:ogc:def:crs:EPSG::" + projectionNumber; // Parses the projection name, to be used by the proj4 library
        proj4.defs(projectionName, projectionInformation); // Tells the proj4 library to use the projection information returned from the external API

        L.Proj.geoJson(geoJSON).addTo(map); // Adds the projection to the map
      }
    }
    loadGeoJSONsWithoutWeather()

    // Load geoJSONs with the weather information of a given date, and project them to the map
    async function loadGeoJSONs(weatherDate) {
      console.log("DEBUG");
      //! Fetch the geoJSON from the backend
      console.log("Started fetching the geoJSONs from the backend.");
      let url =
        "http://localhost:8000/getRegionBordersAndWeather/" + weatherDate;

      const geoJSONsResponse = await fetch(url);

      console.log("Finished fetching the geoJSONs from the backend.");
      // Note that despite the method being named json(),
      //the result is not JSON but is instead the result of taking JSON as input and parsing it to produce a JavaScript object.
      let geoJSONsArray = await geoJSONsResponse.json();
      for (const geoJSON of geoJSONsArray) {
        console.log(
          "Received geoJON with the following projection: ",
          geoJSON.crs.properties.name
        );

        //! Fetch the projection information to use in the proj4 library, so the coordinates can be correctly projected to the map
        console.log(
          "Started fetching the projection information from epsg.io."
        );

        let projectionNumber = geoJSON.crs.properties.name.split("::")[1]; // The number of the EPSG projection, used to fetch the projection information from an external API
        let projectionInformationURL =
          "https://epsg.io/" + projectionNumber + ".proj4"; // The URL of the projection information
        const projectionResponse = await fetch(projectionInformationURL);
        projectionInformation = await projectionResponse.text();

        let projectionName = "urn:ogc:def:crs:EPSG::" + projectionNumber; // Parses the projection name, to be used by the proj4 library
        proj4.defs(projectionName, projectionInformation); // Tells the proj4 library to use the projection information returned from the external API

        L.Proj.geoJson(geoJSON, { style: style }).addTo(map); // Adds the projection to the map
      }
    }

    // let marker = L.marker([9.082, 8.6753]).addTo(map);

    let Basemaps = {
      OSM: mapLayer,
    };

    let Overlaymaps = {
      // Marker: marker,
    };

    L.control.layers(Basemaps, Overlaymaps).addTo(map);
  </script>
</html>
